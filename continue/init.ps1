param(
  [string]$ApiKey
)

# --- Validate API Key ---
if (-not $ApiKey -or $ApiKey -notmatch '^csai-[a-zA-Z0-9-]+$') {
  Write-Error "‚ùå Missing or invalid API key.`nUsage: powershell -Command ""..."" -ApiKey <your-api-key>`nExample: powershell -Command ""..."" -ApiKey csai-ca-abc123"""
  exit 1
}

# --- Paths ---
$ConfigPath = "$HOME\.continue\config.yaml"
$BackupPrefix = "$HOME\.continue\config.yaml.bak"
$NewBlockUrl = "https://raw.githubusercontent.com/costa-security/install/refs/heads/main/continue/config.yaml"
$AutoStart = "# === AUTO-GENERATED BY COSTA START ==="
$AutoEnd = "# === AUTO-GENERATED BY COSTA END ==="

# --- Check for Continue ---
if (-not (Test-Path "$HOME\.continue")) {
  Write-Output "‚ö†Ô∏è Continue extension not found!"
  Write-Output "   Please install Continue first:"
  Write-Output "   ‚Ä¢ VS Code: https://marketplace.visualstudio.com/items?itemName=Continue.continue"
  Write-Output "   ‚Ä¢ JetBrains: https://plugins.jetbrains.com/plugin/22707-continue"
  exit 1
}

# --- Fetch and parse new block ---
try {
  $RemoteContent = Invoke-RestMethod -Uri $NewBlockUrl -UseBasicParsing
} catch {
  Write-Error "‚ùå Failed to download config from remote URL."
  exit 1
}

$Lines = $RemoteContent -split "`n"
$InBlock = $false
$NewBlock = @()
foreach ($line in $Lines) {
  if ($line -eq $AutoStart) { $InBlock = $true }
  if ($InBlock) { $NewBlock += $line }
  if ($line -eq $AutoEnd) { $InBlock = $false }
}
if ($NewBlock.Count -eq 0) {
  Write-Error "‚ùå Could not find the auto-generated block."
  exit 1
}

# Inject API Key
$NewBlock = $NewBlock -replace 'REPLACE_WITH_YOUR_API_KEY', $ApiKey

# Backup and Replace logic
if (Test-Path $ConfigPath) {
  $Config = Get-Content $ConfigPath
  if ($Config -contains $AutoStart) {
    # Replace block
    $Output = @()
    $Inside = $false
    foreach ($line in $Config) {
      if ($line -eq $AutoStart) {
        $Output += $NewBlock
        $Inside = $true
        continue
      }
      if ($line -eq $AutoEnd) {
        $Inside = $false
        continue
      }
      if (-not $Inside) {
        $Output += $line
      }
    }
    $Output | Set-Content $ConfigPath
    Write-Output "‚úÖ Replaced Costa config block in config.yaml"
  } else {
    # Backup and write new
    $i = 1
    $Backup = $BackupPrefix
    while (Test-Path $Backup) {
      $Backup = "$BackupPrefix$i"
      $i++
    }
    Move-Item $ConfigPath $Backup
    $NewBlock | Set-Content $ConfigPath
    Write-Output "üóÉÔ∏è Backed up original config to $Backup"
    Write-Output "‚úÖ Installed Costa config as new file"
  }
} else {
  $NewBlock | Set-Content $ConfigPath
  Write-Output "‚úÖ Created new config.yaml with Costa config"
}

