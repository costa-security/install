#!/bin/bash

set -euo pipefail

# --- INPUT ---
API_KEY="${1:-}"

# Validate API key format (basic check, optional)
if [[ -z "$API_KEY" || ! "$API_KEY" =~ ^csai-[a-zA-Z0-9-]+$ ]]; then
  echo "‚ùå Missing or invalid API key."
  echo "Usage: curl ... | bash -s -- <your-api-key>"
  echo "Example: curl ... | bash -s -- csai-ca-abc123def..."
  exit 1
fi

# --- CONSTANTS ---
CONFIG_PATH="$HOME/.continue/config.yaml"
BACKUP_PREFIX="$HOME/.continue/config.yaml.bak"
TEMP_FILE="$(mktemp)"
NEW_BLOCK_FILE="$(mktemp)"
AUTO_START="# === AUTO-GENERATED BY COSTA START ==="
AUTO_END="# === AUTO-GENERATED BY COSTA END ==="
REMOTE_URL="https://raw.githubusercontent.com/costa-security/install/refs/heads/main/continue/config.yaml"

# --- CHECK MAC ---
if [[ "$(uname)" != "Darwin" ]]; then
  echo "üö´ This script is only supported on macOS. Exiting."
  exit 1
fi

# --- CHECK CONTINUE INSTALL ---
if [[ ! -d "$HOME/.continue" ]]; then
  echo "‚ö†Ô∏è  Continue extension not found!"
  echo "   Please install Continue first:"
  echo "   ‚Ä¢ VS Code: https://marketplace.visualstudio.com/items?itemName=Continue.continue"
  echo "   ‚Ä¢ JetBrains: https://plugins.jetbrains.com/plugin/22707-continue"
  echo ""
  echo "   After installation, restart your editor and try again."
  exit 1
fi

# --- FETCH CONFIG BLOCK ---
echo "üåê Downloading Costa config block..."
REMOTE_CONTENT=$(curl -fsSL "$REMOTE_URL")

# Extract the auto-generated block
NEW_BLOCK=$(echo "$REMOTE_CONTENT" | awk "/$AUTO_START/{flag=1} flag; /$AUTO_END/{flag=0}")

if [[ -z "$NEW_BLOCK" ]]; then
  echo "‚ùå Failed to extract AUTO-GENERATED block from remote config."
  exit 1
fi

# Inject API key
NEW_BLOCK="${NEW_BLOCK//REPLACE_WITH_YOUR_API_KEY/$API_KEY}"

# Write to temp file for safe awk reading
echo "$NEW_BLOCK" > "$NEW_BLOCK_FILE"

# --- REPLACE OR INSTALL ---
if [[ -f "$CONFIG_PATH" ]]; then
  if grep -q "$AUTO_START" "$CONFIG_PATH"; then
    # Replace the auto-generated block using awk with file input
    awk -v start="$AUTO_START" -v end="$AUTO_END" -v repl_file="$NEW_BLOCK_FILE" '
      BEGIN {
        in_block = 0
        while ((getline line < repl_file) > 0) {
          repl[++n] = line
        }
        close(repl_file)
      }
      $0 ~ start {
        print repl[1]
        for (i = 2; i <= n; i++) print repl[i]
        in_block = 1
        next
      }
      $0 ~ end {
        in_block = 0
        next
      }
      !in_block {
        print
      }
    ' "$CONFIG_PATH" > "$TEMP_FILE"

    mv "$TEMP_FILE" "$CONFIG_PATH"
    echo "‚úÖ Replaced existing Costa config block in config.yaml"
  else
    # Backup and write full new file
    i=1
    backup="$BACKUP_PREFIX"
    while [[ -f "$backup" ]]; do
      i=$((i+1))
      backup="${BACKUP_PREFIX}${i}"
    done
    mv "$CONFIG_PATH" "$backup"
    echo "üóÉÔ∏è Backed up original config to $(basename "$backup")"

    cp "$NEW_BLOCK_FILE" "$CONFIG_PATH"
    echo "‚úÖ Installed Costa config as new file"
  fi
else
  cp "$NEW_BLOCK_FILE" "$CONFIG_PATH"
  echo "‚úÖ Created new config.yaml with Costa config"
fi

# --- CLEANUP ---
rm -f "$NEW_BLOCK_FILE"
